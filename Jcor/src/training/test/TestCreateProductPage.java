package training.test;

import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeClass;
import org.testng.AssertJUnit;
import static org.testng.AssertJUnit.assertEquals;

import java.util.UUID;

import org.apache.james.mime4j.field.address.parser.SimpleCharStream;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import training.core.BaseTestClass;
import training.pages.CreateProductPage;
import training.pages.ProductViewerPage;

public class TestCreateProductPage extends BaseTestClass {

	// public TestCreateProductPage(WebDriver driver){
	// this.driver = driver;
	// }

	private static CreateProductPage mCreateProductPage;
	private static ProductViewerPage mProductViewerPage;

	// This method is executed once, before any other method in the class. It is
	// creating new instances of each page object required by tests
	@BeforeClass
	public static void createPageObjectInstances() {
		mCreateProductPage = new CreateProductPage(driver);
		mProductViewerPage = new ProductViewerPage(driver);
	}

	// This method executes before Test method. Its purpose is to open the
	// Product Page in order to have a clean environment before running each
	// test.
	@BeforeMethod
	public void openPage() {
		openUrl(mCreateProductPage.CREATE_PRODUCT_URL);
	}

	// This method tests that a product is correctly created by getting the code
	// and description created in Product Viewer Page and comparing it with the
	// value assigned by the testing framework
	@Test
	public void testCreateFirstValidProduct() {
		// Generate random string for Product code
		String expectedProductCode = UUID.randomUUID().toString();

		// Name for Description field
		String expectedProductDescription = "Testing Product Creation 1";

		// Create product using random generated string
		mCreateProductPage.createProduct(expectedProductCode, expectedProductDescription);

		// Get new product Code displayed in Product Viewer Page
		String currentCodeInProductViewerPage = mProductViewerPage.getBarCodeText();

		// Get new product Description displayed in Product Viewer Page
		String currentDescriptionInProductViewerPage = mProductViewerPage.getDescriptionText();

		// Assert that the Code string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductCode, currentCodeInProductViewerPage);

		// Assert that the Description string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductDescription, currentDescriptionInProductViewerPage);
	}

	@Test
	public void testCreateSecondValidProduct() {
		// Generate random string for Product code
		String expectedProductCode = UUID.randomUUID().toString();

		// Name for Description field
		String expectedProductDescription = "Testing Product Creation 2";

		// Create product using random generated string
		mCreateProductPage.createProduct(expectedProductCode, expectedProductDescription);

		// Get new product Code displayed in Product Viewer Page
		String currentCodeInProductViewerPage = mProductViewerPage.getBarCodeText();

		// Get new product Description displayed in Product Viewer Page
		String currentDescriptionInProductViewerPage = mProductViewerPage.getDescriptionText();

		// Assert that the Code string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductCode, currentCodeInProductViewerPage);

		// Assert that the Description string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductDescription, currentDescriptionInProductViewerPage);
	}

	@Test
	public void testCreateThirdValidProduct() {
		// Generate random string for Product code
		String expectedProductCode = UUID.randomUUID().toString();

		// Name for Description field
		String expectedProductDescription = "Testing Product Creation 3";

		// Create product using random generated string
		mCreateProductPage.createProduct(expectedProductCode, expectedProductDescription);

		// Get new product Code displayed in Product Viewer Page
		String currentCodeInProductViewerPage = mProductViewerPage.getBarCodeText();

		// Get new product Description displayed in Product Viewer Page
		String currentDescriptionInProductViewerPage = mProductViewerPage.getDescriptionText();

		// Assert that the Code string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductCode, currentCodeInProductViewerPage);

		// Assert that the Description string generated by the testing framework
		// matches the code displayed in Product Viewer Page
		AssertJUnit.assertEquals(expectedProductDescription, currentDescriptionInProductViewerPage);
	}

}
